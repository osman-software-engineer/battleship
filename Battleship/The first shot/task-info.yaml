type: edu
files:
  - name: src/battleship/Main.java
    visible: true
    text: |+
      package battleship;
      
      import java.util.Scanner;
      
      
      public class Main {
          public static void main(String[] args) {
              Board gameBoard = new Board(10,10);
              gameBoard.createFogOfWar();
              gameBoard.printFogOfWar();
              Ship[] ships = new Ship[5];
              initializeShips(ships);
              Scanner scanner = new Scanner(System.in);
              //Main Game Loop
              for (Ship ship : ships) {
                  System.out.printf("Enter the coordinates of the %s (%s cells):\n",ship.getName(),ship.getSize());
                  String userInput = scanner.nextLine();
                  // Validate Ship Location is within the dimensions of game board.
                  while(gameBoard.isShipLocationCorrect(userInput)){
                      System.out.println("Error! Wrong ship location! Try again:");
                      System.out.printf("Enter the coordinates of the %s (%s cells):\n",ship.getName(),ship.getSize());
                      userInput = scanner.nextLine();
                      continue;
                  }
                  // Validate Ship Length
                  Location shipLocation = getCoordinates(userInput);
      
                  while (!gameBoard.isShipLengthCorrect(shipLocation, ship)) {
                      System.out.printf("Error! Wrong length of the %s! Try again:\n", ship.getName());
                      userInput = scanner.nextLine();
                      shipLocation = getCoordinates(userInput);
                      //Validate Ship Location
                      while (gameBoard.isShipLocationCorrect(userInput)) {
                          System.out.println("Error! Wrong ship location! Try again:");
                          userInput = scanner.nextLine();
                          shipLocation = getCoordinates(userInput);
                      }
                      continue;
                  }
                  // Validate Ship Closeness to Other Ship
                  while (gameBoard.isShipTooCloseToOtherShip(shipLocation)){
                      System.out.println("Error! You placed it too close to another one. Try again:");
                      userInput = scanner.nextLine();
                      shipLocation = getCoordinates(userInput);
                      while (gameBoard.isShipLocationCorrect(userInput)) {
                          System.out.println("Error! Wrong ship location! Try again:");
                          userInput = scanner.nextLine();
                          shipLocation = getCoordinates(userInput);
                      }
                      continue;
                  }
      
                  gameBoard.placeShip(shipLocation);
                  gameBoard.printFogOfWar();
              }
      
          }
      
          private static Location getCoordinates(String userInput) {
              String[] splitUserInput = userInput.split(" ");
              String x1 = splitUserInput[0].substring(0,1);
              String x2 = splitUserInput[0].substring(1);
              String y1 = splitUserInput[1].substring(0,1);
              String y2 = splitUserInput[1].substring(1);
              return new Location(x1,x2,y1,y2);
          }
      
          private static void initializeShips(Ship[] ships) {
              Ship aircraftCarrier = new Ship(ShipType.AIRCRAFT_CARRIER, 5, 5, null);
              Ship battleship = new Ship(ShipType.BATTLESHIP, 4, 4, null);
              Ship submarine = new Ship(ShipType.SUBMARINE, 3, 3, null);
              Ship cruiser = new Ship(ShipType.CRUISER, 3, 2, null);
              Ship destroyer = new Ship(ShipType.DESTROYER, 2, 2, null);
              ships[0] = aircraftCarrier;
              ships[1] = battleship;
              ships[2] = submarine;
              ships[3] = cruiser;
              ships[4] = destroyer;
          }
      }
    
    
    
    learner_created: false
  - name: src/battleship/Ship.java
    visible: true
    text: |
      package battleship;
      
      public class Ship {
          private String name;
          private int size;
          private int health;
          private Location location;
      
          public Ship(ShipType shipType, int size, int health, Location location) {
              this.name = shipType.getName();
              this.size = size;
              this.health = health;
              this.location = location;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public int getSize() {
              return size;
          }
      
          public void setSize(int size) {
              this.size = size;
          }
      
          public int getHealth() {
              return health;
          }
      
          public void setHealth(int health) {
              this.health = health;
          }
      
          public Location getLocation() {
              return location;
          }
      
          public void setLocation(Location location) {
              this.location = location;
          }
      
      }
    learner_created: false
  - name: src/battleship/ShipType.java
    visible: true
    text: |-
      package battleship;
      
      public enum ShipType {
          AIRCRAFT_CARRIER("Aircraft Carrier"),
          BATTLESHIP("Battleship"),
          SUBMARINE("Submarine"),
          CRUISER("Cruiser"),
          DESTROYER("Destroyer");
      
          private final String name;
      
      
          ShipType(String name) {
              this.name = name;
          }
      
          public String getName() {
              return name;
          }
      
      
      }
    learner_created: false
  - name: src/battleship/Board.java
    visible: true
    text: |+
      package battleship;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class Board {
          private final String[][] field;
      
          private final int rowSize;
      
          private final int colSize;
      
          public Board(int row, int col) {
              this.field = new String[row][col];
              this.rowSize = row;
              this.colSize = col;
          }
      
          public void createFogOfWar() {
              for (int row = 0; row < this.rowSize; row++) {
                  for (int col = 0; col < this.colSize; col++) {
                      this.field[row][col] = "~";
                  }
              }
          }
      
          public void printFogOfWar() {
              char rowLabel = 'A';
              int colLabel = 1;
              // Print Column Label
              System.out.print("  ");
              for (int i = 0; i < 10; i++) {
                  System.out.print(colLabel++ + " ");
              }
              System.out.println();
              // Print Row Label
              for (int row = 0; row < this.rowSize; row++) {
                  System.out.print(rowLabel++ + " ");
                  for (int col = 0; col < this.colSize; col++) {
                      System.out.print(this.field[row][col] + " ");
                  }
                  System.out.println();
              }
          }
      
          public boolean isShipLocationCorrect(String userInput) {
              String regex = "[A-J](10|[1-9])\\s[A-J](10|[1-9])";
              Pattern pattern = Pattern.compile(regex);
              Matcher matcher = pattern.matcher(userInput);
              return !matcher.matches();
          }
      
          public boolean isShipLengthCorrect(Location location, Ship ship) {
              int x1;
              int x2;
              int y1;
              int y2;
              String shipOrientation = getShipOrientation(location);
              if (shipOrientation.equalsIgnoreCase("horizontal")) {
                  x2 = Integer.parseInt(location.getX2());
                  y2 = Integer.parseInt(location.getY2());
                  if (x2 < y2) {
                      x2 = Integer.parseInt(location.getX2()) - 1;
                      y2 = Integer.parseInt(location.getY2());
                  } else {
                      x2 = Integer.parseInt(location.getX2());
                      y2 = Integer.parseInt(location.getY2()) - 1;
                  }
                  return (Math.abs(Math.abs(x2 - y2) - ship.getSize()) == 0);
              } else if (shipOrientation.equalsIgnoreCase("vertical")) {
                  x1 = getRowLabelIndex(location.getX1());
                  y1 = getRowLabelIndex(location.getY1());
                 if (x1<y1){
                     x1 = getRowLabelIndex(location.getX1()) - 1;
                     y1 = getRowLabelIndex(location.getY1());
                 } else {
                     x1 = getRowLabelIndex(location.getX1());
                     y1 = getRowLabelIndex(location.getY1())-1;
                 }
      
      
                  return (Math.abs(Math.abs(x1 - y1) - ship.getSize()) == 0);
              } else {
                  return false;
              }
          }
      
          private String getShipOrientation(Location location) {
              if (!location.getX1().equalsIgnoreCase(location.getY1()) && !location.getX2().equalsIgnoreCase(location.getY2())) {
                  return "diagonal";
              } else if (location.getX1().equals(location.getY1())) {
                  return "horizontal";
              } else {
                  return "vertical";
              }
          }
      
          public void placeShip(Location location) {
              String shipOrientation = getShipOrientation(location);
              int x1;
              int x2;
              int y1;
              int y2;
              if (shipOrientation.equalsIgnoreCase("horizontal")) {
                  x1 = getRowLabelIndex(location.getX1());
                  x2 = Integer.parseInt(location.getX2());
                  y2 = Integer.parseInt(location.getY2());
                  if (x2 < y2) {
                      for (int i = x2; i <= y2; i++) {
                          this.field[x1][i - 1] = "O";
                      }
                  }
                  if (x2 > y2) {
                      for (int i = y2; i <= x2; i++) {
                          this.field[x1][i - 1] = "O";
                      }
                  }
      
      
              }
              if (shipOrientation.equalsIgnoreCase("vertical")) {
                  x1 = getRowLabelIndex(location.getX1());
                  x2 = getColumnLabelIndex(location.getX2());
                  y1 = getRowLabelIndex(location.getY1());
                  y2 = getColumnLabelIndex(location.getY2());
                  for (int i = x1; i <= y1; i++) {
                      this.field[i][x2] = "O";
                  }
              }
      
          }
      
          public boolean isShipTooCloseToOtherShip(Location location) {
              String shipOrientation = getShipOrientation(location);
              int x1;
              int x2;
              int y2;
              boolean checkEast;
              boolean checkWest;
              boolean checkNorth;
              boolean checkSouth;
              if (shipOrientation.equalsIgnoreCase("horizontal")) {
                  x1 = getRowLabelIndex(location.getX1());
                  x2 = Integer.parseInt(location.getX2());
                  y2 = Integer.parseInt(location.getY2());
                  if (x2 < y2) {
                      try {
                          checkWest = this.field[x1][x2 - 2].equalsIgnoreCase("O");
                          if (checkWest) return true;
                      } catch (Exception ignored) {
                      }
                      try {
                          checkEast = this.field[x1][y2 + 1].equalsIgnoreCase("O");
                          if (checkEast) return true;
                      } catch (Exception ignored) {
                      }
                      for (int i = x2; i <= y2; i++) {
                          try {
                              checkNorth = this.field[x1 - 1][i - 1].equalsIgnoreCase("O");
                              if (checkNorth) return true;
                          } catch (Exception ignored) {
                          }
                          try {
                              checkSouth = this.field[x1 + 1][i - 1].equalsIgnoreCase("O");
                              if (checkSouth) return true;
                          } catch (Exception ignored) {
                          }
                      }
      
                  }
      
              }
              if (shipOrientation.equalsIgnoreCase("vertical")) {
                  x1 = getRowLabelIndex(location.getX1());
                  x2 = getColumnLabelIndex(location.getX2());
                  y2 = getColumnLabelIndex(location.getY2());
                  if (x2 < y2) {
                      try {
                          checkNorth = this.field[x1][x2].equalsIgnoreCase("O");
                          if (checkNorth) return true;
                      } catch (Exception ignored) {
                      }
                      try {
                          checkSouth = this.field[x1][y2 + 1].equalsIgnoreCase("O");
                          if (checkSouth) return true;
                      } catch (Exception ignored) {
                      }
                      for (int i = x2; i <= y2; i++) {
                          try {
                              checkEast = this.field[x1 - 1][i - 1].equalsIgnoreCase("O");
                              if (checkEast) return true;
                          } catch (Exception ignored) {
                          }
                          try {
                              checkWest = this.field[x1 + 1][i - 1].equalsIgnoreCase("O");
                              if (checkWest) return true;
                          } catch (Exception ignored) {
                          }
                      }
      
                  }
      
              }
              return false;
      
          }
      
          private static int getRowLabelIndex(String rowLabel) {
              return switch (rowLabel) {
                  case "A" -> 0;
                  case "B" -> 1;
                  case "C" -> 2;
                  case "D" -> 3;
                  case "E" -> 4;
                  case "F" -> 5;
                  case "G" -> 6;
                  case "H" -> 7;
                  case "I" -> 8;
                  case "J" -> 9;
                  default -> throw new IllegalStateException("Unexpected value: " + rowLabel);
              };
          }
      
          private static int getColumnLabelIndex(String colLabel) {
              return Integer.parseInt(colLabel) - 1;
          }
      }
    
    learner_created: false
  - name: src/battleship/Location.java
    visible: true
    text: |
      package battleship;
      
      public class Location {
          private String x1;
          private String x2;
          private String y1;
          private String y2;
      
          public Location(String x1, String x2, String y1, String y2) {
              this.x1 = x1;
              this.x2 = x2;
              this.y1 = y1;
              this.y2 = y2;
          }
      
          public String getX1() {
              return x1;
          }
      
          public void setX1(String x1) {
              this.x1 = x1;
          }
      
          public String getX2() {
              return x2;
          }
      
          public void setX2(String x2) {
              this.x2 = x2;
          }
      
          public String getY1() {
              return y1;
          }
      
          public void setY1(String y1) {
              this.y1 = y1;
          }
      
          public String getY2() {
              return y2;
          }
      
          public void setY2(String y2) {
              this.y2 = y2;
          }
      }
    learner_created: false
  - name: test/Tests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      
      public class Tests extends StageTest<String> {
          @DynamicTest
          CheckResult exampleTest() {
      
              TestedProgram main = new TestedProgram();
              String output = main.start().trim();
              String[][] matrix;
      
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After starting the program, you should request " +
                      "the coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("F3 F7").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "F3 F7");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("A1 D1").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "A1 D1");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("J7 J10").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("J10 J8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "J10 J8");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("B9 D8").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("B9 D9").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "B9 D9");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("E6 D6").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong(
                      "Your program should not print a game field " +
                          "if there is an input mistake. " +
                      "(Too close to another ship)");
              }
      
              if (!output.toLowerCase().contains("error")) {
                  return CheckResult.wrong(
                      "Your program should report an error " +
                          "if there is an input mistake. " +
                          "(Too close to another ship)");
              }
      
              output = main.execute("I2 J2").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "I2 J2");
      
              if (!output.contains("starts")) {
                  return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                      "\"The game starts!\"");
              }
      
              output = main.execute("A1");
              checkShot(getFieldMatrix(output), "A1", output);
      
              return CheckResult.correct();
          }
      
      
          @DynamicTest
          CheckResult test1() {
      
              TestedProgram main = new TestedProgram();
              String output = main.start().trim();
              String[][] matrix;
      
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After starting the program, you should request " +
                      "the coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("J3 J7").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "J3 J7");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("C8 B8");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong(
                      "Your program should not print a game field " +
                          "if there is an input mistake. " +
                      "(Incorrect length of the ship)");
              }
      
              if (!output.toLowerCase().contains("error")) {
                  return CheckResult.wrong(
                      "Your program should report an error " +
                          "if there is an input mistake. " +
                          "(Incorrect length of the ship)");
              }
      
              output = main.execute("C8 F8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "C8 F8");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("A1 C2").trim();
              if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                  return CheckResult.wrong(
                      "Your program should not print a game field " +
                          "if there is an input mistake.");
              }
      
              output = main.execute("A1 C1").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "A1 C1");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("H1 H3").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "H1 H3");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("G2 E2").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong(
                      "Your program should not print a game field " +
                          "if there is an input mistake. " +
                      "(Too close to another ship)");
              }
      
              output = main.execute("B5 C5").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "B5 C5");
      
              if (!output.contains("starts")) {
                  return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                      "\"The game starts!\"");
              }
      
              output = main.execute("M1");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong(
                      "Your program should not print a game field " +
                          "if there is an input mistake.");
              }
      
              output = main.execute("A11");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong(
                      "Your program should not print a game field " +
                          "if there is an input mistake.");
              }
      
              output = main.execute("E4");
              checkMissing(getFieldMatrix(output), "E4", output);
      
              return CheckResult.correct();
          }
      
      
          @DynamicTest
          CheckResult test2() {
      
              TestedProgram main = new TestedProgram();
              String output = main.start().trim();
              String[][] matrix;
      
              if (!output.toLowerCase().contains("aircraft carrier")) {
                  return CheckResult.wrong("After starting the program, you should request " +
                      "the coordinates of the Aircraft Carrier in that way:\n" +
                      "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
              }
      
              output = main.execute("J3 J7").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "J3 J7");
      
              if (!output.toLowerCase().contains("battleship")) {
                  return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                      "the coordinates of the Battleship in that way:\n" +
                      "\"Enter the coordinates of the Battleship (4 cells):\"");
              }
      
              output = main.execute("C8 B8");
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Incorrect length of the ship)");
              }
      
              output = main.execute("C8 F8").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "C8 F8");
      
              if (!output.toLowerCase().contains("submarine")) {
                  return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                      "the coordinates of the Submarine in that way:\n" +
                      "\"Enter the coordinates of the Submarine (3 cells):\"");
              }
      
              output = main.execute("A1 C2").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
              }
      
              output = main.execute("A1 C1").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "A1 C1");
      
              if (!output.toLowerCase().contains("cruiser")) {
                  return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                      "the coordinates of the Cruiser in that way:\n" +
                      "\"Enter the coordinates of the Cruiser (3 cells):\"");
              }
      
              output = main.execute("H1 H3").trim();
              matrix = getFieldMatrix(output);
              findShipByCoordinates(matrix, "H1 H3");
      
              if (!output.toLowerCase().contains("destroyer")) {
                  return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                      "the coordinates of the Destroyer in that way:\n" +
                      "\"Enter the coordinates of the Destroyer (2 cells):\"");
              }
      
              output = main.execute("G2 E2").trim();
              if (isGameFieldPrinted(output)) {
                  return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                      "(Too close to another ship)");
              }
      
              output = main.execute("E5 F5").trim();
              findShipByCoordinates(getFieldMatrix(output), "E5 F5");
      
              if (!output.contains("starts")) {
                  return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                      "\"The game starts!\"");
              }
      
              output = main.execute("E8");
              checkShot(getFieldMatrix(output), "E8", output);
      
              return CheckResult.correct();
          }
      
      
          void findShipByCoordinates(String[][] matrix, String coordinates) {
              int[] coordinatesInt = parseCoordinates(coordinates);
      
              if (coordinatesInt[0] > coordinatesInt[2]) {
                  int swap = coordinatesInt[0];
                  coordinatesInt[0] = coordinatesInt[2];
                  coordinatesInt[2] = swap;
              } else if (coordinatesInt[1] > coordinatesInt[3]) {
                  int swap = coordinatesInt[1];
                  coordinatesInt[1] = coordinatesInt[3];
                  coordinatesInt[3] = swap;
              }
      
              if (coordinatesInt[0] == coordinatesInt[2]) {
                  int cord = coordinatesInt[0];
                  for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                      if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                          throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                      }
                  }
              } else {
                  int cord = coordinatesInt[1];
                  for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                      if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                          throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                      }
                  }
              }
          }
      
          void checkShot(String[][] matrix, String coordinate, String output) {
              int[] parsedCoordinate = new int[2];
              parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
              parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;
      
              if (!output.toLowerCase().contains("hit")) {
                  throw new WrongAnswer(
                      "Your program reacted unpredictably to a hit.\n" +
                          "You should print \"You hit a ship!\".");
              }
      
              if (output.toLowerCase().contains("missed")) {
                  throw new WrongAnswer("Seems like your program prints " +
                      "both \"hit\" and \"missed\".\n" +
                      "You should print only \"You hit a ship!\".");
              }
      
              if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                  throw new WrongAnswer("You should print \"X\" in " +
                      " coordinates where you hit the ship.");
              }
          }
      
          void checkMissing(String[][] matrix, String coordinate, String output) {
              int[] parsedCoordinate = new int[2];
              parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
              parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;
      
              if (!output.toLowerCase().contains("missed")) {
                  throw new WrongAnswer(
                      "Your program reacted unpredictably to a miss.\n" +
                      "You should print \"You missed!\".");
              }
      
              if (output.toLowerCase().contains("hit")) {
                  throw new WrongAnswer("Seems like your program prints " +
                      "both \"hit\" and \"missed\".\n" +
                      "You should print only \"You missed!\".");
              }
      
              if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                  throw new WrongAnswer("You should print \"M\" in " +
                      " coordinates where you missed.");
              }
          }
      
          int[] parseCoordinates(String coordinatesString) {
              String[] splittedCoords = coordinatesString.split(" ");
              int[] parsedCoordinates = new int[4];
      
              parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
              parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
              parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
              parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;
      
              return parsedCoordinates;
          }
      
          int charToInt(String charCoordinate) {
              charCoordinate = charCoordinate.toLowerCase();
              char character = charCoordinate.charAt(0);
              return (int) character - (int) 'a';
          }
      
          String[][] getFieldMatrix(String output) {
      
              WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                  "Make sure you print it like in examples!");
      
              String[] splittedOutput = output.split("\n");
              String[][] matrix = new String[10][10];
      
              try {
                  int index = 0;
                  while (!(splittedOutput[index].contains("1") &&
                      splittedOutput[index].contains("2") &&
                      splittedOutput[index].contains("10"))) {
                      index++;
                      if (index > 1000) {
                          throw cantParseException;
                      }
                  }
                  index++;
      
                  for (int i = 0; i < 10; i++) {
                      String temp = splittedOutput[index].substring(2).trim();
                      String[] splittedLine = temp.trim().split(" ");
                      if (splittedLine.length != 10) {
                          throw cantParseException;
                      }
                      matrix[i] = splittedLine;
                      index++;
                  }
              } catch (IndexOutOfBoundsException ignored) {
                  throw cantParseException;
              }
      
              return matrix;
          }
      
          boolean isGameFieldPrinted(String output) {
              return output.contains("1") && output.contains("2") && output.contains("10");
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/projects/125/stages/664/implement#comment
status: Solved
record: 1
